@model FileViewerViewModel
@{
    ViewData["Title"] = Model.File.FileName;
}

@if (Model.File.FileType.ToLowerInvariant() == ".pptx")
{
    <!-- PPTXjs CSS -->
    <link rel="stylesheet" href="~/lib/pptxjs/pptxjs.css">
    <link rel="stylesheet" href="~/lib/pptxjs/nv.d3.min.css">

    <!-- PowerPoint specific styles -->
    <style>
        #pptx-container.fullscreen-mode {
            background: white !important;
            z-index: 9999 !important;
        }

        #pptx-container.fullscreen-mode #pptx-result {
            height: 100vh !important;
            overflow-y: auto !important;
            padding: 20px !important;
        }

        /* Style the PPTXjs output */
        #pptx-result .slide {
            margin: 20px auto !important;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1) !important;
            border: 1px solid #e5e7eb !important;
        }

        /* Make sure slides are visible */
        #pptx-result div[style*="background"] {
            min-height: 400px !important;
        }

        /* Hide navigation controls since single page view is removed */
        #pptx-nav-controls, #pptx-bottom-nav {
            display: none !important;
        }

        /* Hide the mode toggle button */
        #pptx-mode-toggle {
            display: none !important;
        }

        /* Navigation button states */
        .nav-button:disabled {
            opacity: 0.5 !important;
            cursor: not-allowed !important;
        }

        .nav-button:disabled:hover {
            background-color: inherit !important;
        }

        /* Touch-friendly navigation */
        .slide-navigation {
            user-select: none;
            -webkit-user-select: none;
        }

        /* Make navigation controls visible by default */
        #pptx-nav-controls, #pptx-bottom-nav {
            display: flex !important;
        }

        /* Initially hide only when not in single slide mode */
        #pptx-container:not(.single-slide-ready) #pptx-nav-controls {
            display: none !important;
        }
    </style>
}


<div class="mb-6">
    <div class="flex flex-col sm:flex-row justify-between items-staems-center gap-4">
        <div>
            <nav class="text-sm text-gray-500 mb-2">
                <a asp-controller="File" asp-action="Browse" class="hover:text-blue-600">Browse Files</a>
                <span class="mx-2">‚Ä∫</span>
                <a asp-controller="File" asp-action="Browse" asp-route-className="@Model.File.Class"
                   class="hover:text-blue-600">@Model.File.Class</a>
                <span class="mx-2">‚Ä∫</span>
                <a asp-controller="File" asp-action="Browse" asp-route-className="@Model.File.Class"
                   asp-route-subject="@Model.File.Subject" class="hover:text-blue-600">@Model.File.Subject</a>
            </nav>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">@Model.File.FileName</h1>
            <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
                <span class="flex items-center">
                    <span class="mr-1">@FileHelper.GetFileIcon(Model.File.FileType)</span>
                    @Model.File.FileType.ToUpper()
                </span>
                <span>üíæ @FileHelper.FormatFileSize(Model.File.FileSize)</span>
                <span>üìÖ @Model.File.UploadDate.ToString("MMM dd, yyyy")</span>
                @if (Model.File.UploadedByUser != null)
                {
                    <span>üë§ @Model.File.UploadedByUser.Username</span>
                }
            </div>
        </div>

        <div class="flex flex-wrap gap-2">
            <form asp-controller="File" asp-action="Download" asp-route-id="@Model.File.FileId" method="get"
                  class="inline">
                <button type="submit"
                        class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium touch-manipulation transition-colors">
                    ‚¨áÔ∏è Download
                </button>
            </form>

            @if (Model.CanDelete)
            {
                <form asp-controller="File" asp-action="Delete" asp-route-id="@Model.File.FileId" method="post"
                      onsubmit="return confirm('Are you sure you want to delete this file?')" class="inline">
                    <button type="submit"
                            class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium touch-manipulation transition-colors">
                        üóëÔ∏è Delete
                    </button>
                </form>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Model.File.Description))
    {
        <div class="mt-4 p-4 bg-blue-50 rounded-lg">
            <h3 class="font-medium text-blue-900 mb-1">Description:</h3>
            <p class="text-blue-800">@Model.File.Description</p>
        </div>
    }
</div>

<!-- File Navigation -->
@if (!string.IsNullOrEmpty(Model.PreviousFileId) || !string.IsNullOrEmpty(Model.NextFileId))
{
    <div class="flex justify-between items-center mb-6 p-4 bg-gray-100 rounded-lg">
        <div>
            @if (!string.IsNullOrEmpty(Model.PreviousFileId))
            {
                <a asp-controller="File" asp-action="View" asp-route-id="@Model.PreviousFileId"
                   class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                    ‚Üê Previous
                </a>
            }
        </div>

        <div class="text-sm text-gray-600">
            <a asp-controller="File" asp-action="Browse" asp-route-className="@Model.File.Class"
               asp-route-subject="@Model.File.Subject"
               class="hover:text-blue-600">
                View all @Model.File.Subject files
            </a>
        </div>

        <div>
            @if (!string.IsNullOrEmpty(Model.NextFileId))
            {
                <a asp-controller="File" asp-action="View" asp-route-id="@Model.NextFileId"
                   class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                    Next ‚Üí
                </a>
            }
        </div>
    </div>
}

<!-- File Viewer Container -->
<div class="bg-white rounded-lg shadow-lg overflow-hidden" id="viewer-container">
    @if (FileHelper.IsPdfFile(Model.File.FileType))
    {
        <!-- PDF Viewer with Page Navigation -->
        <div id="pdf-viewer-container" class="bg-white rounded-lg shadow-lg">
            <!-- PDF viewer will be initialized here by JavaScript -->
        </div>
    }
    else if (FileHelper.IsImageFile(Model.File.FileType))
    {
        <!-- Image Viewer -->
        <div class="relative text-center bg-black">
            <img src="/File/ViewInline/@Model.File.FileId"
                 alt="@Model.File.FileName"
                 class="max-w-full max-h-screen mx-auto"
                 id="image-viewer"/>
        </div>
    }
    else if (FileHelper.IsVideoFile(Model.File.FileType))
    {
        <!-- Video Viewer -->
        <div class="relative bg-black">
            <video controls class="w-full max-h-screen" id="video-viewer">
                <source src="/File/ViewInline/@Model.File.FileId" type="@Model.ContentType">
                Your browser does not support the video tag.
            </video>
        </div>
    }
    else if (FileHelper.IsAudioFile(Model.File.FileType))
    {
        <!-- Audio Player -->
        <div class="p-8 text-center">
            <div class="text-6xl mb-4">üéµ</div>
            <h3 class="text-xl font-medium text-gray-900 mb-4">@Model.File.FileName</h3>
            <audio controls class="w-full max-w-md mx-auto">
                <source src="/File/ViewInline/@Model.File.FileId" type="@Model.ContentType">
                Your browser does not support the audio element.
            </audio>
        </div>
    }
    else if (FileHelper.IsTextFile(Model.File.FileType))
    {
        <!-- Text File Viewer -->
        <div class="bg-white border border-gray-300 rounded-lg">
            <div class="bg-gray-100 px-4 py-2 border-b border-gray-300 flex justify-between items-center">
                <span class="font-medium text-gray-700">üìù Text Document</span>
                <div class="flex gap-2">
                    <button id="text-fullscreen"
                            class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm touch-target touch-manipulation">
                        ‚õ∂ Fullscreen
                    </button>
                </div>
            </div>
            <div class="p-6" id="text-content">
                <div class="text-center py-8">
                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                    <p class="mt-2 text-gray-600">Loading text content...</p>
                </div>
            </div>
        </div>
    }
    else if (FileHelper.IsPowerPointFile(Model.File.FileType))
    {
        @if (Model.File.FileType.ToLowerInvariant() == ".pptx")
        {
            <!-- PPTX Presentation Viewer -->
            <div class="bg-white border border-gray-300 rounded-lg" id="pptx-container">
                <div class="bg-gray-100 px-4 py-2 border-b border-gray-300 flex justify-between items-center">
                    <span class="font-medium text-gray-700">üìä PowerPoint Presentation (.pptx)</span>
                    <div class="flex gap-2">
                        <button onclick="toggleFullscreenPowerPoint()"
                                class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm touch-target touch-manipulation">
                            ‚õ∂ Fullscreen
                        </button>
                    </div>
                </div>
                <div class="relative bg-white" style="min-height: 500px;">
                    <!-- PPTXjs will render the presentation here -->
                    <div id="pptx-result" class="p-4">
                        <div class="text-center py-8">
                            <div
                                class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
                            <p class="mt-2 text-gray-600">Loading PowerPoint presentation...</p>
                            <p class="mt-1 text-sm text-gray-500">Initializing PPTXjs...</p>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <!-- PPT files - show download message -->
            <div class="container mx-auto px-4 py-6">
                <div class="bg-white rounded-lg shadow-lg p-6">
                    <div class="text-center py-8">
                        <div class="text-yellow-600 text-6xl mb-4">üìÑ</div>
                        <h2 class="text-2xl font-bold text-gray-800 mb-4">PowerPoint Presentation (.ppt)</h2>
                        <p class="text-gray-600 mb-4">
                            This is an older PowerPoint format (.ppt) that cannot be viewed in the browser.
                        </p>
                        <p class="text-sm text-gray-500 mb-6">
                            Please download the file to view it in Microsoft PowerPoint or convert it to .pptx format.
                        </p>

                        <!-- Download Button -->
                        <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
                            <a href="/File/Download/@Model.File.FileId"
                               class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium touch-target touch-manipulation transition-colors inline-flex items-center gap-2">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Download File
                            </a>
                        </div>

                        <!-- File Info -->
                        <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                            <div class="text-sm text-gray-600">
                                <p><strong>File:</strong> @Model.File.FileName</p>
                                <p><strong>Size:</strong> @FileHelper.GetFormattedFileSize(Model.File.FileSize)</p>
                                <p><strong>Type:</strong> PowerPoint Presentation (.ppt)</p>
                                <p><strong>Uploaded:</strong> @Model.File.UploadDate.ToString("MMM dd, yyyy")</p>
                            </div>
                        </div>

                        <!-- Conversion Note -->
                        <div class="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                            <div class="flex items-start gap-3">
                                <svg class="w-5 h-5 text-blue-600 mt-0.5 flex-shrink-0" fill="none"
                                     stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <div class="text-sm text-blue-800">
                                    <p class="font-medium">Tip for better browser viewing:</p>
                                    <p>Convert this file to .pptx format using Microsoft PowerPoint or an online
                                        converter, then upload the new version for in-browser viewing.</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else if (FileHelper.IsWordFile(Model.File.FileType) || FileHelper.IsExcelFile(Model.File.FileType))
    {
        <!-- Office Document Viewer (Word/Excel only) -->
        <div class="bg-white border border-gray-300 rounded-lg">
            <div class="bg-gray-100 px-4 py-2 border-b border-gray-300 flex justify-between items-center">
                <span class="font-medium text-gray-700">
                    @if (FileHelper.IsWordFile(Model.File.FileType))
                    {
                        <span>üìò Word Document</span>
                    }
                    else if (FileHelper.IsExcelFile(Model.File.FileType))
                    {
                        <span>üìó Excel Spreadsheet</span>
                    }
                </span>
                <div class="flex gap-2">
                    <button id="office-fullscreen"
                            class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm touch-target touch-manipulation">
                        ‚õ∂ Fullscreen
                    </button>
                    <button id="refresh-viewer"
                            class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm touch-target touch-manipulation">
                        üîÑ Refresh
                    </button>
                </div>
            </div>
            <div class="relative bg-white" style="min-height: 500px;">
                @if (FileHelper.IsWordFile(Model.File.FileType))
                {
                    <!-- Word Document Viewer -->
                    <div id="word-viewer" class="p-6">
                        <div class="text-center py-8">
                            <div
                                class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                            <p class="mt-2 text-gray-600">Loading Word document...</p>
                        </div>
                    </div>
                }
                else if (FileHelper.IsExcelFile(Model.File.FileType))
                {
                    <!-- Excel Spreadsheet Viewer -->
                    <div id="excel-viewer" class="p-4">
                        <div class="text-center py-8">
                            <div
                                class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-green-600"></div>
                            <p class="mt-2 text-gray-600">Loading Excel spreadsheet...</p>
                        </div>
                    </div>
                }

                <!-- Error fallback -->
                <div id="office-error" class="hidden p-8 text-center">
                    <div class="text-red-600 text-xl mb-4">‚ö†Ô∏è Error</div>
                    <p class="text-gray-600 mb-4">Unable to load document content</p>
                    <a asp-controller="File" asp-action="Download" asp-route-id="@Model.File.FileId"
                       class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                        Download File
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Generic File Display -->
        <div class="p-8 text-center">
            <div class="text-6xl mb-4">@FileHelper.GetFileIcon(Model.File.FileType)</div>
            <h3 class="text-xl font-medium text-gray-900 mb-4">@Model.File.FileName</h3>
            <p class="text-gray-600 mb-6">This file type cannot be previewed in the browser.</p>
            <a asp-controller="File" asp-action="Download" asp-route-id="@Model.File.FileId"
               class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                Download to View
            </a>
        </div>
    }
</div>

@section Scripts {
    @if (FileHelper.IsPdfFile(Model.File.FileType))
    {
        <!-- PDF.js Library -->
        <script src="~/lib/pdfjs/pdf.min.js"></script>
        <script>
            // Set PDF.js worker path
            pdfjsLib.GlobalWorkerOptions.workerSrc = '/lib/pdfjs/pdf.worker.min.js';

            class PDFViewer {
                constructor(containerId, pdfUrl) {
                    this.container = document.getElementById(containerId);
                    this.pdfUrl = pdfUrl;
                    this.pdfDoc = null;
                    this.currentPage = 1;
                    this.totalPages = 0;
                    this.scale = 1.5;
                    this.canvas = null;
                    this.ctx = null;

                    this.init();
                }

                async init() {
                    try {
                        // Load the PDF document
                        this.pdfDoc = await pdfjsLib.getDocument(this.pdfUrl).promise;
                        this.totalPages = this.pdfDoc.numPages;

                        // Create the UI
                        this.createUI();

                        // Set up event listeners
                        this.setupEventListeners();

                        // Render the first page
                        await this.renderPage(1);

                    } catch (error) {
                        console.error('Error loading PDF:', error);
                        this.showError('Failed to load PDF document');
                    }
                }

                createUI() {
                    this.container.innerHTML = `
                        <div class="pdf-controls bg-gray-800 text-white p-4 flex flex-wrap items-center justify-between gap-4 rounded-t-lg">
                            <div class="flex items-center gap-4">
                                <button id="prev-page" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg font-medium touch-target touch-manipulation disabled:opacity-50 disabled:cursor-not-allowed">
                                    ‚Üê Previous
                                </button>
                                <span id="page-info" class="font-medium">Page 1 of ${this.totalPages}</span>
                                <button id="next-page" class="bg-blue-600 hover:bg-blue-700 px-4 py-2 rounded-lg font-medium touch-target touch-manipulation disabled:opacity-50 disabled:cursor-not-allowed">
                                    Next ‚Üí
                                </button>
                            </div>
                            <div class="flex items-center gap-4">
                                <button id="zoom-out" class="bg-gray-600 hover:bg-gray-700 px-3 py-2 rounded-lg touch-target touch-manipulation">
                                    ‚àí
                                </button>
                                <span id="zoom-level" class="font-medium min-w-16 text-center">150%</span>
                                <button id="zoom-in" class="bg-gray-600 hover:bg-gray-700 px-3 py-2 rounded-lg touch-target touch-manipulation">
                                    +
                                </button>
                                <button id="pdf-fullscreen" class="bg-green-600 hover:bg-green-700 px-4 py-2 rounded-lg font-medium touch-target touch-manipulation">
                                    ‚õ∂ Fullscreen
                                </button>
                            </div>
                        </div>
                        <div class="pdf-canvas-container bg-gray-200 flex items-center justify-center p-4 rounded-b-lg">
                            <canvas id="pdf-canvas" class="border border-gray-300 shadow-lg bg-white"></canvas>
                        </div>
                        <div id="pdf-error" class="hidden p-4 bg-red-100 border border-red-400 text-red-700 rounded mt-4"></div>
                    `;

                    this.canvas = document.getElementById('pdf-canvas');
                    this.ctx = this.canvas.getContext('2d');
                }

                setupEventListeners() {
                    // Navigation buttons
                    document.getElementById('prev-page').addEventListener('click', () => this.previousPage());
                    document.getElementById('next-page').addEventListener('click', () => this.nextPage());

                    // Zoom buttons
                    document.getElementById('zoom-in').addEventListener('click', () => this.zoomIn());
                    document.getElementById('zoom-out').addEventListener('click', () => this.zoomOut());

                    // Fullscreen button
                    document.getElementById('pdf-fullscreen').addEventListener('click', () => this.toggleFullscreen());

                    // Keyboard navigation
                    document.addEventListener('keydown', (e) => {
                        if (this.container.contains(document.activeElement) || document.activeElement === document.body) {
                            switch (e.key) {
                                case 'ArrowLeft':
                                    e.preventDefault();
                                    this.previousPage();
                                    break;
                                case 'ArrowRight':
                                    e.preventDefault();
                                    this.nextPage();
                                    break;
                                case '+':
                                case '=':
                                    e.preventDefault();
                                    this.zoomIn();
                                    break;
                                case '-':
                                    e.preventDefault();
                                    this.zoomOut();
                                    break;
                            }
                        }
                    });

                    // Touch gestures
                    let touchStartX = 0;
                    this.canvas.addEventListener('touchstart', (e) => {
                        touchStartX = e.touches[0].clientX;
                    });

                    this.canvas.addEventListener('touchend', (e) => {
                        const touchEndX = e.changedTouches[0].clientX;
                        const diff = touchStartX - touchEndX;

                        if (Math.abs(diff) > 50) { // Minimum swipe distance
                            if (diff > 0) {
                                this.nextPage(); // Swipe left = next page
                            } else {
                                this.previousPage(); // Swipe right = previous page
                            }
                        }
                    });
                }

                async renderPage(pageNumber) {
                    try {
                        const page = await this.pdfDoc.getPage(pageNumber);
                        const viewport = page.getViewport({scale: this.scale});

                        this.canvas.height = viewport.height;
                        this.canvas.width = viewport.width;

                        const renderContext = {
                            canvasContext: this.ctx,
                            viewport: viewport
                        };

                        await page.render(renderContext).promise;
                        this.updatePageInfo();
                    } catch (error) {
                        console.error('Error rendering page:', error);
                        this.showError('Failed to render page');
                    }
                }

                async previousPage() {
                    if (this.currentPage > 1) {
                        this.currentPage--;
                        await this.renderPage(this.currentPage);
                    }
                }

                async nextPage() {
                    if (this.currentPage < this.totalPages) {
                        this.currentPage++;
                        await this.renderPage(this.currentPage);
                    }
                }

                async zoomIn() {
                    this.scale = Math.min(this.scale + 0.25, 6.0);
                    await this.renderPage(this.currentPage);
                    this.updateZoomLevel();
                }

                async zoomOut() {
                    this.scale = Math.max(this.scale - 0.25, 0.5);
                    await this.renderPage(this.currentPage);
                    this.updateZoomLevel();
                }

                toggleFullscreen() {
                    if (!document.fullscreenElement) {
                        this.container.requestFullscreen().catch(err => {
                            console.error('Error attempting to enable fullscreen:', err);
                        });
                    } else {
                        document.exitFullscreen();
                    }
                }

                updatePageInfo() {
                    const pageInfo = document.getElementById('page-info');
                    const prevBtn = document.getElementById('prev-page');
                    const nextBtn = document.getElementById('next-page');

                    pageInfo.textContent = `Page ${this.currentPage} of ${this.totalPages}`;
                    prevBtn.disabled = this.currentPage === 1;
                    nextBtn.disabled = this.currentPage === this.totalPages;
                }

                updateZoomLevel() {
                    const zoomLevel = document.getElementById('zoom-level');
                    zoomLevel.textContent = `${Math.round(this.scale * 100)}%`;
                }

                showError(message) {
                    const errorDiv = document.getElementById('pdf-error');
                    errorDiv.textContent = message;
                    errorDiv.classList.remove('hidden');
                }
            }

            // Initialize PDF viewer when the page loads
            document.addEventListener('DOMContentLoaded', function () {
                const pdfViewer = new PDFViewer('pdf-viewer-container', '/File/ViewInline/@Model.File.FileId');
            });
        </script>
    }
    else if (FileHelper.IsTextFile(Model.File.FileType))
    {
        <script>
            // Text file viewer functionality
            document.addEventListener('DOMContentLoaded', function () {
                loadTextContent();

                // Fullscreen functionality for text
                document.getElementById('text-fullscreen').addEventListener('click', function () {
                    const container = document.getElementById('viewer-container');
                    if (!document.fullscreenElement) {
                        container.requestFullscreen().catch(err => {
                            console.error('Error attempting to enable fullscreen:', err);
                        });
                    } else {
                        document.exitFullscreen();
                    }
                });
            });

            async function loadTextContent() {
                try {
                    const response = await fetch('/File/ViewInline/@Model.File.FileId');
                    const text = await response.text();

                    document.getElementById('text-content').innerHTML = `
                        <pre class="whitespace-pre-wrap text-sm text-gray-800 leading-relaxed font-mono bg-gray-50 p-4 rounded border max-h-96 overflow-auto">${escapeHtml(text)}</pre>
                    `;
                } catch (error) {
                    console.error('Error loading text content:', error);
                    document.getElementById('text-content').innerHTML = `
                        <div class="text-center py-8">
                            <div class="text-red-600 text-xl mb-4">‚ö†Ô∏è Error</div>
                            <p class="text-gray-600 mb-4">Failed to load text content</p>
                            <a href="/File/Download/@Model.File.FileId" 
                               class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                                Download File
                            </a>
                        </div>
                    `;
                }
            }

            function escapeHtml(unsafe) {
                return unsafe
                    .replace(/&/g, "&amp;")
                    .replace(/</g, "&lt;")
                    .replace(/>/g, "&gt;")
                    .replace(/"/g, "&quot;")
                    .replace(/'/g, "&#039;");
            }
        </script>
    }
    else if (Model.File.FileType.Equals(".pptx", StringComparison.OrdinalIgnoreCase))
    {
        <!-- PPTXjs JavaScript dependencies -->
        <script src="~/lib/pptxjs/jquery-1.11.3.min.js"></script>
        <script src="~/lib/pptxjs/jszip.min.js"></script>
        <script src="~/lib/pptxjs/filereader.js"></script>
        <script src="~/lib/pptxjs/d3.min.js"></script>
        <script src="~/lib/pptxjs/nv.d3.min.js"></script>
        <script src="~/lib/pptxjs/dingbat.js"></script>
        <script src="~/lib/pptxjs/pptxjs.js"></script>
        <script src="~/lib/pptxjs/divs2slides.js"></script>

        <script>
            $(document).ready(function () {
                // Global error handler for PPTXjs errors
                window.addEventListener('error', function (e) {
                    if (e.filename && e.filename.includes('pptxjs.js')) {
                        console.error('PPTXjs library error:', e.error);
                        showPptxError('PowerPoint processing library encountered an error. The file may contain unsupported features.');
                        return false;
                    }
                    // Handle specific "Cannot read properties of null" error
                    if (e.message && e.message.includes('Cannot read properties of null')) {
                        console.error('PPTXjs parsing error - file structure issue:', e.error);
                        showPptxError('PowerPoint file structure is not recognized. The file may be corrupted, password-protected, or created with a newer version of PowerPoint.');
                        return false;
                    }
                });

                // Check if PPTXjs is loaded
                if (typeof $.fn.pptxToHtml === 'undefined') {
                    console.error('PPTXjs plugin not loaded!');
                    showPptxError('PPTXjs library not loaded properly');
                    return;
                }

                try {
                    // Show loading state
                    $("#pptx-result").html(`
                        <div class="text-center py-8">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
                            <p class="mt-2 text-gray-600">Loading PowerPoint presentation...</p>
                            <p class="mt-1 text-sm text-gray-500">Initializing PPTXjs...</p>
                        </div>
                    `);

                    // Test file accessibility first
                    const fileUrl = "/File/ViewInline/@Model.File.FileId";

                    $.ajax({
                        url: fileUrl,
                        type: 'HEAD',
                        success: function (data, status, xhr) {
                            const contentType = xhr.getResponseHeader('content-type');
                            const contentLength = xhr.getResponseHeader('content-length');

                            // Validate that it's actually a PowerPoint file
                            if (!contentType || !contentType.includes('presentationml.presentation')) {
                                showPptxError('File is not a valid PowerPoint presentation format.');
                                return;
                            }

                            if (!contentLength || parseInt(contentLength) < 1000) {
                                showPptxError('PowerPoint file appears to be corrupted or empty.');
                                return;
                            }

                            // Update loading message
                            $("#pptx-result").html(`
                                <div class="text-center py-8">
                                    <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-orange-600"></div>
                                    <p class="mt-2 text-gray-600">Processing PowerPoint presentation...</p>
                                    <p class="mt-1 text-sm text-gray-500">File validated, converting to HTML...</p>
                                </div>
                            `);

                            // Try multiple PPTXjs initialization approaches
                            initializePPTXjs(fileUrl);
                        },
                        error: function (xhr, status, error) {
                            showPptxError('Cannot access PowerPoint file: ' + error);
                        }
                    });

                } catch (error) {
                    console.error('Failed to initialize PPTXjs:', error);
                    showPptxError('Initialization error: ' + error.message);
                }
            });

            function initializePPTXjs(fileUrl) {
                // Try PPTXjs configuration
                setTimeout(function () {
                    try {
                        // Clear the container
                        $("#pptx-result").empty();

                        // Basic PPTXjs configuration with error handling
                        try {
                            $("#pptx-result").pptxToHtml({
                                pptxFileUrl: fileUrl,
                                slideMode: false,
                                keyBoardShortCut: false,
                                mediaProcess: false,
                                jsZipV2: false,
                                themeProcess: false,
                                slidesScale: "100%",
                                // Add error callback
                                onError: function (error) {
                                    console.error('PPTXjs parsing error:', error);
                                    showPptxError('PowerPoint file parsing failed. The file may be corrupted or in an unsupported format.');
                                }
                            });
                        } catch (pptxError) {
                            console.error('PPTXjs configuration error:', pptxError);
                            tryAlternativeApproach(fileUrl);
                            return;
                        }

                        // Check success after 5 seconds
                        setTimeout(function () {
                            const content = $("#pptx-result").html();
                            if (!content || content.trim() === '' || content.includes('undefined')) {
                                tryAlternativeApproach(fileUrl);
                            }
                        }, 5000);

                    } catch (error) {
                        console.error('PPTXjs initialization error:', error);
                        tryAlternativeApproach(fileUrl);
                    }
                }, 500);
            }

            function tryAlternativeApproach(fileUrl) {
                console.log('Trying alternative PPTXjs approach...');
                try {
                    $("#pptx-result").empty();
                    $("#pptx-result").html(`
                        <div class="text-center py-8">
                            <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
                            <p class="mt-2 text-gray-600">Trying alternative loading method...</p>
                        </div>
                    `);

                    // Try with different PPTXjs settings
                    $("#pptx-result").pptxToHtml({
                        pptxFileUrl: fileUrl,
                        slideMode: true,
                        keyBoardShortCut: false,
                        mediaProcess: true,
                        jsZipV2: true, // Try with JSZip v2
                        themeProcess: true,
                        slidesScale: "100%",
                        // Add error callback
                        onError: function (error) {
                            console.error('Alternative PPTXjs approach failed:', error);
                            showPptxError('Unable to process PowerPoint file. It may be corrupted, password-protected, or in an unsupported format.');
                        }
                    });

                    // Check success after 8 seconds
                    setTimeout(function () {
                        const content = $("#pptx-result").html();
                        if (!content || content.trim() === '' || content.includes('undefined') || content.includes('animate-spin')) {
                            console.log('Alternative approach also failed');
                            showPptxError('PPTXjs failed to process the PowerPoint file. The file may be corrupted, password-protected, or contain unsupported features.');
                        } else {
                            console.log('Alternative approach succeeded');
                        }
                    }, 8000);

                } catch (error) {
                    console.error('Alternative PPTXjs approach error:', error);
                    showPptxError('Failed to load PowerPoint presentation: ' + error.message);
                }
            }

            function showPptxError(message) {
                $("#pptx-result").html(`
                    <div class="text-center py-8">
                        <div class="text-red-600 text-xl mb-4">‚ö†Ô∏è Error</div>
                        <p class="text-gray-600 mb-2">Unable to load PowerPoint presentation</p>
                        <p class="text-sm text-gray-500 mb-4">${message}</p>
                        <a href="/File/Download/@Model.File.FileId" 
                           class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium touch-target touch-manipulation transition-colors">
                            Download Original File
                        </a>
                    </div>
                `);
            }

            // ========== BASIC PPTX FUNCTIONALITY ==========
            // PPTXjs will display all slides by default - no single page navigation needed


        </script>
    }

    <!-- Global PowerPoint fullscreen function (always available) -->
    <script>
        function toggleFullscreenPowerPoint() {
            const container = document.getElementById('pptx-container');

            if (!container) {
                console.error('PowerPoint container not found');
                return;
            }

            try {
                if (!document.fullscreenElement) {
                    container.requestFullscreen().then(() => {
                        container.classList.add('fullscreen-mode');
                        console.log('Entered fullscreen mode');
                    }).catch(err => {
                        console.error('Error entering fullscreen:', err.message);
                        // Fallback for browsers that don't support requestFullscreen
                        alert('Fullscreen not supported in this browser');
                    });
                } else {
                    document.exitFullscreen().then(() => {
                        container.classList.remove('fullscreen-mode');
                        console.log('Exited fullscreen mode');
                    });
                }
            } catch (error) {
                console.error('Fullscreen error:', error);
                alert('Fullscreen functionality not available');
            }
        }

        // Handle fullscreen change events
        document.addEventListener('fullscreenchange', function () {
            const container = document.getElementById('pptx-container');
            if (!document.fullscreenElement && container) {
                container.classList.remove('fullscreen-mode');
            }
        });
    </script>

}

@if (FileHelper.IsWordFile(Model.File.FileType) || FileHelper.IsExcelFile(Model.File.FileType))
{
    @if (FileHelper.IsWordFile(Model.File.FileType))
    {
        <!-- Mammoth.js for Word documents -->
        <script src="~/lib/mammoth.min.js"></script>
    }
    else if (FileHelper.IsExcelFile(Model.File.FileType))
    {
        <!-- SheetJS for Excel files -->
        <script src="~/lib/xlsx.min.js"></script>
    }

    <!-- Office document viewer script -->
    <script src="~/js/office-viewer.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize office document functionality
            setupOfficeFullscreen();
            setupOfficeRefresh(@Model.File.FileId, '@Model.File.FileName', '@Model.File.FileType');

            @if (FileHelper.IsWordFile(Model.File.FileType))
            {
                <text>loadWordDocument(@Model.File.FileId, '@Model.File.FileName');</text>
            }
            else if (FileHelper.IsExcelFile(Model.File.FileType))
            {
                <text>loadExcelDocument(@Model.File.FileId, '@Model.File.FileName');</text>
            }
        });
    </script>
}
